Tests for ``101-lazy_matrix_mul``
===========================

Functions:
----------
1. ``lazy_matrix_mul(m_a, m_b)``
This function multiplies two matrices using NumPy

`m_a` and `m_b` are both matrices(lists of lists)
To be multiplicable, the number of rows in `m_a` has to equal the number of columns in `m_b`

import the function from the module:
>>> mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Tests
-----

Okay args:
>>> print(mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
[[ 7 10]
 [15 22]]
>>> print(mul([[1.0, 2.0]], [[3, 4], [5, 6]]))
[[13. 16.]]
>>> print(mul([[1, 2, 3]], [[1, 2], [2, 4], [3, 6]]))
[[14 28]]

Numpy can handle lists of lists vs. lists
>>> print(mul([1, 2], [[1, 3], [4, 5]]))
[ 9 13]
>>> print(mul([[1, 3], [4, 5]], [5, 7]))
[26 55]

Missing args:
(No defaults, exception raised)
>>> print(mul())
Traceback (most recent call last):
    ...
TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
>>> print(mul([[1, 2, 3]]))
Traceback (most recent call last):
    ...
TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'


Bad arguments:
Not lists
>>> print(mul("alx", [[2, 4]]))
Traceback (most recent call last):
    ...
numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('<U3'), dtype('int64')) -> None
>>> print(mul([[2, 4]], "alx"))
Traceback (most recent call last):
    ...
numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('int64'), dtype('<U3')) -> None

Empty lists
>>> print(mul([], [[12, 45]]))
Traceback (most recent call last):
    ...
ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 0)
>>> print(mul([[1, 2], [5, 7]], [[]]))
Traceback (most recent call last):
    ...
ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 2)

Non-numbers:
>>> print(mul([['2', 3, 4]], [[2, 3], [6, 7], [8,9]]))
Traceback (most recent call last):
    ...
numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('<U21'), dtype('int64')) -> None
>>> print(mul([[2, 3, 4]], [['2', '5'], [6,7], [8,9]]))
Traceback (most recent call last):
    ...
numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('int64'), dtype('<U21')) -> None

Uneven row sizes:
>>> print(mul([[1, 2, 5], [6,7], [8,9]], [[1,2],[5,6]]))
Traceback (most recent call last):
    ...
ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (3,) + inhomogeneous part.
>>> print(mul([[2, 3, 4]],[[1, 2, 5], [6,7], [8,9]]))
Traceback (most recent call last):
    ...
ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (3,) + inhomogeneous part.

Cannot be multiplied:
>>> print(mul([[1, 2], [3, 4]], [[1, 2, 3], [10,20,30], [4,5,6]]))
Traceback (most recent call last):
    ...
ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 3 is different from 2)
