Tests for ``0-add_integer``
===========================

Functions:
----------
1. ``add_integer(a, b)``
This function adds two integers as in ``a + b``

``a`` and ``b`` are both integers, with ``b`` defaulting to 98

import the function from the module:
>>> add = __import__('0-add_integer').add_integer

Tests
-----

Normal inputs:
>>> add(1, 4)
5
>>> add(3, 7)
10
>>> add(23, -1)
22

Float inputs:
(These are first cast to integers)
>>> add(12.0, 13.5)
25
>>> add(14.7, 3)
17
>>> add(float('inf'), 2.0)
Traceback (most recent call last):
   ...
OverflowError: cannot convert float infinity to integer
>>> add(float('NaN'), 2.0)
Traceback (most recent call last):
   ...
ValueError: cannot convert float NaN to integer

Default value for b (98):
>>> add(2)
100
>>> add(-67)
31

Wrong input type:
(Raises a TypeError exception, detail: 'a must be an integer' or
 'b must be an integer' accordingly)
>>> add([1, 3], 4)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add(1, 'x')
Traceback (most recent call last):
    ...
TypeError: b must be an integer

>>> add(None, None)
Traceback (most recent call last):
    ...
TypeError: a must be an integer
